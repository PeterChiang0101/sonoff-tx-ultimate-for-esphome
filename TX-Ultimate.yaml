substitutions:
  name: "TX Ultimate"
  friendly_name: "TX Ultimate"

  relay_count: "3"

  vibra_time: 100ms
  button_on_time: 250ms

  button_brightness: "1"
  button_color: "{25,60,110}"

  nightlight: "on"
  nightlight_brightness: "0.3"
  nightlight_color: "{255,200,0}"

  latitude: "23.0Â°"
  longitude: "120.2Â°"

  touch_brightness: "1"
  touch_color: "{0,255,255}"
  touch_effect: "Scan"

  long_press_brightness: "1"
  long_press_color: "{255,0,0}"
  long_press_effect: "Scan"

  multi_touch_brightness: "0.7"
  multi_touch_color: "{75,82,92}"
  multi_touch_effect: "Rainbow"

  swipe_left_brightness: "1"
  swipe_left_color: "{25,60,110}"
  swipe_left_effect: "none"

  swipe_right_brightness: "1"
  swipe_right_color: "{25,60,110}"
  swipe_right_effect: "none"

  relay_1_pin: GPIO18
  relay_2_pin: GPIO17
  relay_3_pin: GPIO27
  relay_4_pin: GPIO23

  vibra_motor_pin: GPIO21
  pa_power_pin: GPIO26

  led_pin: GPIO13
  status_led_pin: GPIO33

  uart_tx_pin: GPIO19
  uart_rx_pin: GPIO22

  audio_lrclk_pin: GPIO4
  audio_bclk_pin: GPIO2
  audio_sdata_pin: GPIO15

  touchpanel_power_pin: GPIO5


esphome:
  name: ${name}
  friendly_name: ${friendly_name}
  project:
    name: smarthomeyourself.tx_ultimate
    version: "1.0"

  on_boot:
    - priority: 500
      then:
      - lambda: |- 
          relay_3->set_internal(${relay_count} < 3);
          touchfield_3->set_internal(${relay_count} < 3);
          coupled_3->set_internal(${relay_count} < 3);
          light_3->set_internal(${relay_count} < 3);

    - priority: -100  # At this priority, pretty much everything should already be initialized.
      then:
        - binary_sensor.template.publish:
            id: touchfield_1
            state: OFF
        - binary_sensor.template.publish:
            id: touchfield_2
            state: OFF
        - binary_sensor.template.publish:
            id: touchfield_3
            state: OFF
        - binary_sensor.template.publish:
            id: multi_touch
            state: OFF
        - binary_sensor.template.publish:
            id: swipe_left
            state: OFF
        - binary_sensor.template.publish:
            id: swipe_right
            state: OFF
        - binary_sensor.template.publish:
            id: long_press
            state: OFF
        - script.execute: refresh_led_default

esp32:
  board: esp32dev
  framework:
    type: arduino

logger:
#  hardware_uart: UART2
  level: DEBUG
  logs:
    binary_sensor: INFO
    light: INFO
    script: INFO
    switch: INFO
    tx_ultimate_touch: INFO
    uart_debug: INFO

# Enable Home Assistant API
api:

ota:

wifi:
  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    password: "12345678"
improv_serial:

captive_portal:
    
external_components:
  - source:
      type: git
      url: https://github.com/SmartHome-yourself/sonoff-tx-ultimate-for-esphome
      ref: main
    components: [tx_ultimate_touch]

globals:
  - id: nightlight_color
    type: int [3]
    restore_value: no
    initial_value: ${nightlight_color}
  - id: button_color
    type: int [3]
    restore_value: no
    initial_value: ${button_color}
  - id: long_press_color
    type: int [3]
    restore_value: no
    initial_value: ${long_press_color}
  - id: multi_touch_color
    type: int [3]
    restore_value: no
    initial_value: ${multi_touch_color}
  - id: swipe_left_color
    type: int [3]
    restore_value: no
    initial_value: ${swipe_left_color}
  - id: swipe_right_color
    type: int [3]
    restore_value: no
    initial_value: ${swipe_right_color}
  - id: touch_color
    type: int [3]
    restore_value: no
    initial_value: ${touch_color}    

binary_sensor:
  - platform: template
    name: "Touchfield 1"
    id: touchfield_1
    icon: mdi:gesture-tap-button
    on_press:
      - if:
          condition:
            switch.is_on: coupled_1
          then:
            - switch.toggle: relay_1
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: touchfield_1
          state: OFF

  - platform: template
    name: "Touchfield 2"
    id: touchfield_2
    icon: mdi:gesture-tap-button
    on_press:
      - if:
          condition:
            switch.is_on: coupled_2
          then:
            - switch.toggle: relay_2
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: touchfield_2
          state: OFF

  - platform: template
    name: "Touchfield 3"
    id: touchfield_3
    icon: mdi:gesture-tap-button
    on_press:
      - if:
          condition:
            switch.is_on: coupled_3
          then:
            - switch.toggle: relay_3
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: touchfield_3
          state: OFF

  - platform: template
    name: "Swipe Left"
    id: swipe_left
    icon: mdi:gesture-swipe-left
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: swipe_left
          state: OFF

  - platform: template
    name: "Swipe Right"
    id: swipe_right
    icon: mdi:gesture-swipe-right
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: swipe_right
          state: OFF

  - platform: template
    name: "Multi-touch"
    id: multi_touch
    icon: mdi:gesture-two-tap
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: multi_touch
          state: OFF

  - platform: template
    name: "Long Press"
    id: long_press
    icon: mdi:gesture-tap-hold
    on_press:
      - delay: ${button_on_time}
      - binary_sensor.template.publish:
          id: long_press
          state: OFF

switch:
  - name: "Relay L1"
    id: relay_1
    pin: ${relay_1_pin}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        if:
          condition:
            switch.is_on: coupled_1
          then:
            - script.execute: led_on_left
    on_turn_off:
      then:
        if:
          condition:
            switch.is_on: coupled_1
          then:
            - script.execute: led_off_left
    platform: gpio

  - name: "Relay L2"
    id: relay_2
    pin: ${relay_2_pin}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        if:
          condition:
            switch.is_on: coupled_2
          then:
            - script.execute: led_on_middle
    on_turn_off:
      then:
        if:
          condition:
            switch.is_on: coupled_2
          then:
            - script.execute: led_off_middle
    platform: gpio

  - name: "Relay L3"
    id: relay_3
    pin: ${relay_3_pin}
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        if:
          condition:
            switch.is_on: coupled_3
          then:
            - script.execute: led_on_right
    on_turn_off:
      then:
        if:
          condition:
            switch.is_on: coupled_3
          then:
            - script.execute: led_off_right
    platform: gpio

  - name: "Vibration"
    id: vibra
    pin: ${vibra_motor_pin}
    icon: mdi:vibrate
    restore_mode: ALWAYS_OFF
    entity_category: config
    on_turn_on:
      - delay: ${vibra_time}
      - switch.turn_off: vibra
    platform: gpio

  - name: "Touch panel - Power"
    id: touch_power
    pin:
      number: ${touchpanel_power_pin}
      inverted: true
    internal: true
    restore_mode: RESTORE_DEFAULT_ON
    entity_category: config
    platform: gpio

  - name: "Nightlight - Sun Set Driven"
    id: nightlight
    internal: true
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default
    platform: template

  - name: "Nightlight"
    id: nightlight_active
    icon: mdi:lightbulb-night
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: refresh_led_default
    on_turn_off:
      then:
        - script.execute: refresh_led_default
    platform: template

  - name: "Light L1"
    id: light_1
    icon: mdi:wall-sconce-flat-variant
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: led_on_left
    on_turn_off:
      then:
        - script.execute: led_off_left
    platform: template

  - name: "Light L2"
    id: light_2
    icon: mdi:wall-sconce-flat-variant
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: led_on_middle
    on_turn_off:
      then:
        - script.execute: led_off_middle
    platform: template
          
  - name: "Light L3"
    id: light_3
    icon: mdi:wall-sconce-flat-variant
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_OFF
    on_turn_on:
      then:
        - script.execute: led_on_right
    on_turn_off:
      then:
        - script.execute: led_off_right
    platform: template

  - name: "Coupled L1"
    id: coupled_1
    icon: mdi:handshake-outline
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    platform: template

  - name: "Coupled L2"
    id: coupled_2
    icon: mdi:handshake-outline
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    platform: template

  - name: "Coupled L3"
    id: coupled_3
    icon: mdi:handshake-outline
    entity_category: config
    optimistic: true
    restore_mode: RESTORE_DEFAULT_ON
    platform: template

  - name: "${friendly_name} Restart"
    platform: restart

# LED control & location
light: 
  - name: "Light - Full"
    id: leds
    internal: true
    platform: neopixelbus
    type: GRB
    variant: WS2811
    pin: ${led_pin}
    num_leds: 32
    default_transition_length: 0.7s
    effects: &light_effects_full
      - addressable_rainbow:
          name: "Rainbow"
          speed: 5
          width: 30
      - addressable_rainbow:
          name: "Rainbow - Fast"
          speed: 50
      - addressable_scan:
          name: "Scan"
          scan_width: 3
          move_interval: 25ms
      - pulse:
          name: "Pulse"
          transition_length: 2s
          update_interval: 2s
      - pulse:
          name: "Pulse - Fast"
          transition_length: 0.5s
          update_interval: 0.5s
      - addressable_flicker:
          
    on_turn_off:
      then:
        - script.execute: refresh_led_default

  - name: "LEDs Button right 3 Gang"
    id: leds_right_3gang
    platform: partition
    internal: true
    segments:
      - id: leds
        from: 7
        to: 7
      - id: leds
        from: 16
        to: 16
    
  - name: "LEDs Button right 2 Gang"
    id: leds_right_2gang
    platform: partition
    internal: true
    segments:
      - id: leds
        from: 5
        to: 7
      - id: leds
        from: 16
        to: 18
    
  - name: "LEDs Button middle 3 Gang"
    id: leds_middle_3gang
    platform: partition
    internal: true
    segments:
      - id: leds
        from: 3
        to: 4
      - id: leds
        from: 19
        to: 20
    
  - name: "LEDs Button left 3 Gang"
    id: leds_left_3gang
    platform: partition
    internal: true
    segments:
      - id: leds
        from: 0
        to: 0
      - id: leds
        from: 23
        to: 23
    
  - name: "LEDs Button left 2 Gang"
    id: leds_left_2gang
    platform: partition
    internal: true
    segments:
      - id: leds
        from: 0
        to: 2
      - id: leds
        from: 21
        to: 23
    
  - name: "LEDs Nightlight"
    id: leds_nightlight
    platform: partition
    internal: true
    segments:
      - id: leds
        from: 0
        to: 31
    effects: *light_effects_full

  - name: "LEDs Left"
    id: leds_left
    platform: partition
    internal: true
    segments:
      - id: leds
        from: 25
        to: 30
    effects: *light_effects_full

  - name: "LEDs Right"
    id: leds_right
    platform: partition
    internal: true
    segments:
      - id: leds
        from: 9
        to: 14
    effects: *light_effects_full

media_player:
  - platform: i2s_audio
    id: media_out
    name: ${friendly_name} Player
    dac_type: external
    i2s_dout_pin: ${audio_sdata_pin}
    i2s_audio_id: audio_i2s
    i2s_comm_fmt: msb
    mode: mono
    mute_pin:
        number: GPIO26
        inverted: true

i2s_audio:
  id: audio_i2s
  i2s_lrclk_pin: ${audio_lrclk_pin}
  i2s_bclk_pin: ${audio_bclk_pin}

uart:
  tx_pin: ${uart_tx_pin}
  rx_pin: ${uart_rx_pin}
  id: my_uart
  baud_rate: 115200
  data_bits: 8
  stop_bits: 1
  parity: NONE
  debug:
    direction: RX
    dummy_receiver: false
    after:
      timeout: 2s
      bytes: 2048
    sequence:
      - lambda: UARTDebug::log_hex(direction, bytes, ' ');

tx_ultimate_touch:
  id: tx_touch
  uart: my_uart

  on_press:
    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_press", "Touch Position: %d / State: %d", touch.x, touch.state);

  on_release:
    - script.execute:
        id: handle_release
        pos: !lambda "return touch.x;"

    - switch.turn_on: vibra

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_release", "Release Position: %d / State: %d", touch.x, touch.state);

  on_swipe_left:
    - script.execute: led_on_swipe_left

    - switch.turn_on: vibra

    - binary_sensor.template.publish:
        id: swipe_left
        state: ON

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_swipe_left", "Swipe Left Position: %d / State: %d", touch.x, touch.state);

  on_swipe_right:
    - script.execute: led_on_swipe_right

    - switch.turn_on: vibra

    - binary_sensor.template.publish:
        id: swipe_right
        state: ON

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_swipe_right", "Swipe Right Position: %d / State: %d", touch.x, touch.state);

  on_full_touch_release:
    - script.execute: led_on_full_touch

    - switch.turn_on: vibra

    - binary_sensor.template.publish:
        id: multi_touch
        state: ON

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_full_touch_release", "Full Touch Release Position: %d / State: %d", touch.x, touch.state);

  on_long_touch_release:
    - script.execute: led_on_long_touch

    - switch.turn_on: vibra

    - binary_sensor.template.publish:
        id: long_press
        state: ON

    - lambda: >
        ESP_LOGD("tx_ultimate_touch.on_long_touch_release", "Long Touch Release Position: %d / State: %d", touch.x, touch.state);

time:
  - platform: homeassistant
  - platform: sntp
    on_time:
      # Every 5 minutes
      - seconds: 0
        minutes: /5
        then:
          - script.execute: refresh_led_default

sun:
  latitude: ${latitude}
  longitude: ${longitude}

# set the default values for the LEDs
# 1 gang: Middle
# 2 gang: Left + Right
# 3 gang: Left + Middle + Right
script:
  - id: refresh_led_default
    mode: restart
    then:
      - if:
          condition:
            or: 
              - switch.is_on: nightlight
              - switch.is_on: nightlight_active
          then:
            - script.execute: led_on_nightlight
          else:
            - light.turn_off: leds_nightlight
      - if:
          condition:
            lambda: return (${relay_count} > 1 && id(relay_1).state && id(coupled_1).state);
          then:
            - script.execute: led_on_left
          else:
            - script.execute: led_off_left
      - if:
          condition:
            lambda: return (${relay_count} == 3 && id(relay_2).state && id(coupled_2).state) || (${relay_count}==1 && id(relay_1).state && id(coupled_1).state);
          then:
            - script.execute: led_on_middle
          else:
            - script.execute: led_off_middle
      - if:
          condition:
            lambda: return (${relay_count} == 2 && id(relay_2).state && id(coupled_2).state) || (${relay_count}==3 && id(relay_3).state && id(coupled_3).state);
          then:
            - script.execute: led_on_right
          else:
            - script.execute: led_off_right

  # LED scripts
  - id: led_on_left
    mode: single
    then:
      if:
        condition:
          lambda: return ${relay_count} == 3;
        then:
          - light.turn_on:
              id: leds_left_3gang
              brightness: !lambda |-
                if(id(nightlight).state || id(nightlight_active).state){
                  return ${nightlight_brightness} + 0.1;
                } else {
                  return ${button_brightness};
                }
              red: !lambda "return id(button_color)[0]/255.0;"
              green: !lambda "return id(button_color)[1]/255.0;"
              blue:  !lambda "return id(button_color)[2]/255.0;"
        else:
          - light.turn_on:
              id: leds_left_2gang
              brightness: !lambda |-
                if(id(nightlight).state || id(nightlight_active).state){
                  return ${nightlight_brightness} + 0.1;
                } else {
                  return ${button_brightness};
                }
              red: !lambda "return id(button_color)[0]/255.0;"
              green: !lambda "return id(button_color)[1]/255.0;"
              blue:  !lambda "return id(button_color)[2]/255.0;"

  - id: led_on_middle
    mode: single
    then:
      if:
        condition:
          lambda: return ${relay_count} == 3;
        then:
          - light.turn_on:
              id: leds_middle_3gang
              brightness: !lambda |-
                if(id(nightlight).state || id(nightlight_active).state){
                  return ${nightlight_brightness} + 0.1;
                } else {
                  return ${button_brightness};
                }
              red: !lambda "return id(button_color)[0]/255.0;"
              green: !lambda "return id(button_color)[1]/255.0;"
              blue:  !lambda "return id(button_color)[2]/255.0;"
        else:
          - light.turn_on:
              id: leds_right_2gang
              brightness: !lambda |-
                if(id(nightlight).state || id(nightlight_active).state){
                  return ${nightlight_brightness} + 0.1;
                } else {
                  return ${button_brightness};
                }
              red: !lambda "return id(button_color)[0]/255.0;"
              green: !lambda "return id(button_color)[1]/255.0;"
              blue:  !lambda "return id(button_color)[2]/255.0;"

  - id: led_on_right
    mode: single
    then:
      - light.turn_on:
          id: leds_right_3gang
          brightness: !lambda |-
            if(id(nightlight).state || id(nightlight_active).state){
              return ${nightlight_brightness} + 0.1;
            } else {
              return ${button_brightness};
            }
          red: !lambda "return id(button_color)[0]/255.0;"
          green: !lambda "return id(button_color)[1]/255.0;"
          blue:  !lambda "return id(button_color)[2]/255.0;"


  - id: led_off_left
    mode: single
    then:
      - if:
          condition:
            lambda: "return id(nightlight).state || id(nightlight_active).state;"
          then:
            - if:
                condition:
                  lambda: return ${relay_count} == 3;
                then:
                  - light.turn_on:
                      id: leds_left_3gang
                      brightness: ${nightlight_brightness}
                      red: !lambda "return id(nightlight_color)[0]/255.0;"
                      green: !lambda "return id(nightlight_color)[1]/255.0;"
                      blue:  !lambda "return id(nightlight_color)[2]/255.0;"
                else:
                  - light.turn_on:
                      id: leds_left_2gang
                      brightness: ${nightlight_brightness}
                      red: !lambda "return id(nightlight_color)[0]/255.0;"
                      green: !lambda "return id(nightlight_color)[1]/255.0;"
                      blue:  !lambda "return id(nightlight_color)[2]/255.0;"
          else:
            - if:
                condition:
                  lambda: return ${relay_count} == 3;
                then:
                  - light.turn_off:
                      id: leds_left_3gang
                else:
                  - light.turn_off:
                      id: leds_left_2gang
      
  - id: led_off_middle
    mode: single
    then:
      - if:
          condition:
            lambda: "return id(nightlight).state || id(nightlight_active).state;"
          then:
            - light.turn_on:
                id: leds_middle_3gang
                brightness: ${nightlight_brightness}
                red: !lambda "return id(nightlight_color)[0]/255.0;"
                green: !lambda "return id(nightlight_color)[1]/255.0;"
                blue:  !lambda "return id(nightlight_color)[2]/255.0;"
          else:
            - light.turn_off:
                id: leds_middle_3gang

  - id: led_off_right
    mode: single
    then:
      - if:
          condition:
            lambda: "return id(nightlight).state || id(nightlight_active).state;"
          then:
            - if:
                condition:
                  lambda: return ${relay_count} == 3;
                then:
                  - light.turn_on:
                      id: leds_right_3gang
                      brightness: ${nightlight_brightness}
                      red: !lambda "return id(nightlight_color)[0]/255.0;"
                      green: !lambda "return id(nightlight_color)[1]/255.0;"
                      blue:  !lambda "return id(nightlight_color)[2]/255.0;"
                else:
                  - light.turn_on:
                      id: leds_right_2gang
                      brightness: ${nightlight_brightness}
                      red: !lambda "return id(nightlight_color)[0]/255.0;"
                      green: !lambda "return id(nightlight_color)[1]/255.0;"
                      blue:  !lambda "return id(nightlight_color)[2]/255.0;"
          else:
            - if:
                condition:
                  lambda: return ${relay_count} == 3;
                then:
                  - light.turn_off:
                      id: leds_right_3gang
                else:
                  - light.turn_off:
                      id: leds_right_2gang

  - id: led_on_nightlight
    mode: single
    then:
      - light.turn_on:
          id: leds_nightlight
          brightness: ${nightlight_brightness}
          red: !lambda "return id(nightlight_color)[0]/255.0;"
          green: !lambda "return id(nightlight_color)[1]/255.0;"
          blue:  !lambda "return id(nightlight_color)[2]/255.0;"

  - id: led_on_swipe_left
    mode: restart
    then:
      - light.turn_on:
          id: leds_left
          brightness: !lambda |-
            if(id(nightlight).state || id(nightlight_active).state){
              return ${nightlight_brightness} + 0.1;
            } else {
              return ${swipe_left_brightness};
            }
          red: !lambda "return id(swipe_left_color)[0]/255.0;"
          green: !lambda "return id(swipe_left_color)[1]/255.0;"
          blue:  !lambda "return id(swipe_left_color)[2]/255.0;"
          effect: ${swipe_left_effect}
      - delay: 2s
      - if:
          condition:
            lambda: "return id(nightlight).state || id(nightlight_active).state;"
          then:
            - light.turn_on:
                id: leds_left
                brightness: ${nightlight_brightness}
                red: !lambda "return id(nightlight_color)[0]/255.0;"
                green: !lambda "return id(nightlight_color)[1]/255.0;"
                blue:  !lambda "return id(nightlight_color)[2]/255.0;"
                effect: "none"
          else:
            - light.turn_off:
                id: leds_left

  - id: led_on_swipe_right
    mode: restart
    then:
      - light.turn_on:
          id: leds_right
          brightness: !lambda |-
            if(id(nightlight).state || id(nightlight_active).state){
              return ${nightlight_brightness} + 0.1;
            } else {
              return ${swipe_right_brightness};
            }
          red: !lambda "return id(swipe_right_color)[0]/255.0;"
          green: !lambda "return id(swipe_right_color)[1]/255.0;"
          blue:  !lambda "return id(swipe_right_color)[2]/255.0;"
          effect: ${swipe_right_effect}
      - delay: 2s
      - if:
          condition:
            lambda: "return id(nightlight).state || id(nightlight_active).state;"
          then:
            - light.turn_on:
                id: leds_right
                brightness: ${nightlight_brightness}
                red: !lambda "return id(nightlight_color)[0]/255.0;"
                green: !lambda "return id(nightlight_color)[1]/255.0;"
                blue:  !lambda "return id(nightlight_color)[2]/255.0;"
                effect: "none"
          else:
            - light.turn_off:
                id: leds_right
          
  # more than two points touched
  - id: led_on_full_touch
    mode: restart
    then:
      - light.turn_on:
          id: leds
          brightness: !lambda |-
            if(id(nightlight).state || id(nightlight_active).state){
              return ${nightlight_brightness} + 0.1;
            } else {
              return ${multi_touch_brightness};
            }
          red: !lambda "return id(multi_touch_color)[0]/255.0;"
          green: !lambda "return id(multi_touch_color)[1]/255.0;"
          blue:  !lambda "return id(multi_touch_color)[2]/255.0;"
          effect: ${multi_touch_effect}
      - delay: 1.5s
      - light.turn_off:
          id: leds

  - id: led_on_long_touch
    mode: restart
    then:
      - light.turn_on:
          id: leds
          brightness: !lambda |-
            if(id(nightlight).state || id(nightlight_active).state){
              return ${nightlight_brightness} + 0.1;
            } else {
              return ${long_press_brightness};
            }
          red: !lambda "return id(long_press_color)[0]/255.0;"
          green: !lambda "return id(long_press_color)[1]/255.0;"
          blue:  !lambda "return id(long_press_color)[2]/255.0;"
          effect: ${long_press_effect}
      - delay: 2s
      - light.turn_off:
          id: leds

  - id: handle_release
    mode: restart
    parameters:
      pos: int
    then:
      - if:
          condition:
            lambda: "return ${relay_count}==1;"
          then:
            - binary_sensor.template.publish:
                id: touchfield_1
                state: ON

      - if:
          condition:
            lambda: "return ${relay_count}==2;"
          then:
            - if:
                condition:
                  lambda: "return pos <= 5;"
                then:
                  - binary_sensor.template.publish:
                      id: touchfield_1
                      state: ON

                else:
                  - binary_sensor.template.publish:
                      id: touchfield_2
                      state: ON

      - if:
          condition:
            lambda: "return ${relay_count}==3;"
          then:
            - if:
                condition:
                  lambda: "return pos <= 3;"
                then:
                  - binary_sensor.template.publish:
                      id: touchfield_1
                      state: ON

                else:
                  - if:
                      condition:
                        lambda: "return pos <= 7;"
                      then:
                        - binary_sensor.template.publish:
                            id: touchfield_2
                            state: ON

                      else:
                        - binary_sensor.template.publish:
                            id: touchfield_3
                            state: ON
# state 1: release
# state 2: touch
# state 11: full touch release
# state 12: swipe right
# state 13: swipe left